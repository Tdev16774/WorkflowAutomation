#! /usr/bin/env python
# -*- coding: utf-8 -*-
import time

from subprocess import check_output
from src.device import Device

# Handles all devices, give orders to devices for given config
# Master Class
from src.helper import debug_print, debug_error_print, print_and_exit_script, AccountSettings, Model


class DevicePoolManager(object):

    def __init__(self, model):
        self.initialized = False
        self.alldevicesinitiliazed = False
        self.alldevicesdone = False
        self.connecteddevices = []
        self.model = model

        # results from devices to metrics the result
        self.resultswifi = dict()
        self.resultsgoogleacc = dict()
        self.resultsinstallappsps = dict()
        self.resultspaireddriverapp = dict()
        self.resultssettings = dict()

        # all device serial numbers
        # index 0 in alldevs is device 0
        self.alldevs = []
        self.alldevscounter = 0
        for device in self.adb_devices():
            if "devices" not in device and "device" not in device:
                self.alldevs.append(device)
                self.alldevscounter += 1

        # start threads&& adb shell sendevent /devices if enough connected phones exist
        self.devices = {}
        if self.check_phones_connected():
            for i in range(int(self.model.countercars)):

                phonenumber = None
                if str(self.model.phonenumbersgiven) == str(True):
                    phonenumber = int(str(self.model.phonenumbers).split(',')[i])
                else:
                    phonenumber = int(str(self.model.phonenumbers).split(',')[0])

                pin = None
                if str(self.model.disablesimlock) == str(True):
                    pin = int(str(self.model.simpins).split(',')[i])

                thread = Device(i, self.alldevs[i], phonenumber, pin)
                self.devices.update({i: thread})
                thread.start()

                # after last device was started, go in watch mode
                if str(i + 1) == str(self.model.countercars):
                    time.sleep(1)
                    debug_print(
                        "DeviceManager : Last device started, DeviceManager goes in watch mode and gives orders")
                    self.run()
        else:
            debug_print("should init phones: " + str(self.model.countercars))
            debug_print("connected phones: " + str(self.alldevscounter))
            debug_error_print("Something wrong here!", "Connect more phones or maybe put another value in "
                                                       "config settings")
            print_and_exit_script()

    # Runner Method from master
    # Sets Class Flags in Device class to let the device threads do their job
    # Script - Flow
    def run(self):

        # waits till all devices are initialized
        while not self.alldevicesinitiliazed:
            # wait 5 sec
            # TODO check error state of all threads&& adb shell sendevent /devices and make error handling
            self.check_if_all_devices_are_initialized()
            debug_print("DeviceManager : ⌛ Not all devices are initialized")
            time.sleep(5)

        debug_print("DeviceManager : ✅ All devices are initialized")

        if str(self.model.configuresettings) == str(True) and str(self.model.configuresoundsettings) == str(True):
            # debug_print("DeviceManager : Set Flag - Configure Sound Settings")
            Device.lock.acquire()
            # Device.configuresoundsettings = True
            Device.lock.release()
            #time.sleep(5)

        if str(self.model.configuresettings) == str(True) and str(self.model.configurelocationsettings) == str(True):
            # debug_print("DeviceManager : Set Flag - Configure Location Settings")
            Device.lock.acquire()
            # Device.configurelocationsettings = True
            Device.lock.release()
            #time.sleep(5)

        if str(self.model.configuresettings) == str(True) and str(self.model.disablesimlock) == str(True):
            # debug_print("DeviceManager : Set Flag - Disable Sim Lock")
            Device.lock.acquire()
            # Device.disablesimlock = True
            Device.lock.release()
            #time.sleep(5)

        if str(self.model.loginwifi) == str(True):
            debug_print("DeviceManager : Set Flag - Enable WiFi")
            # self.enable_wifi_mode()
            #time.sleep(5)

        if str(self.model.creategoogleaccount) == str(True):
            debug_print("DeviceManager : Set Flag - Creating Google Account")
            # self.enable_google_account()
            #time.sleep(5)

        if len(self.model.installappsps) > 0:
            debug_print("DeviceManager : Set Flag - Install apps from Play Store")
            # self.install_apps_from_playstore()
            #time.sleep(5)

        if str(self.model.pairdriverapp) == str(True):
            # debug_print("DeviceManager : Set Flag - Pair Driver App")
            Device.lock.acquire()
            # Device.pairdriverapp = True
            Device.pairdriverappname = self.model.drivername
            Device.pairdriverapppw = self.model.driverpw
            Device.lock.release()
            #time.sleep(5)

        if str(self.model.configuresettings) == str(True) and str(self.model.configurepowersavingmode) == str(True):
            debug_print("DeviceManager : Set Flag - Disable Power Saving Mode For Driver App")
            Device.lock.acquire()
            Device.configurepowersavingmode = True
            Device.lock.release()
            time.sleep(5)

        # wait till all devices are done with their work
        while not self.alldevicesdone:
            if self.check_if_all_devices_are_initialized():
                self.check_if_all_devices_are_done()
                debug_print("DeviceManager : ⌛️ All devices are initialized. But Not all all of them are done")

                # store all results
                for i in range(int(self.model.countercars)):
                    self.resultswifi[self.devices.get(i).currentdevice] = self.devices.get(i).wifienabled

                    googleaccsettings = AccountSettings(self.devices.get(i).createdgoogleaccount,
                                                        self.devices.get(i).email, self.devices.get(i).password)
                    self.resultsgoogleacc[str(self.devices.get(i).currentdevice) + "||" + str(
                        self.devices.get(i).serialno)] = "Success: " + str(
                        googleaccsettings.success) + " Email: " + str(googleaccsettings.email) + " Password: " + str(
                        googleaccsettings.emailpassword)

                    self.resultsinstallappsps[self.devices.get(i).currentdevice] = self.devices.get(i).installedapps

                    self.resultspaireddriverapp[self.devices.get(i).currentdevice] = self.devices.get(i).ispaired

                    self.resultssettings[self.devices.get(i).currentdevice] = "Sound: " + str(
                        self.devices.get(i).soundconfigconfigured) + " SimLock: " + str(
                        self.devices.get(i).disabledpin) + " Location: " + str(self.devices.get(i).locationconfigured)

                # prints results
                print "RESUUULT SETTINGS:"
                print self.resultssettings
                print "RESUUULT WIFI:"
                print self.resultswifi
                print "RESUUULT GOOGLEACCS:"
                print self.resultsgoogleacc
                print "RESUUULT INSTALLEDAPPS:"
                print self.resultsinstallappsps
                print "RESUUULT PAIRED DRIVER APP"
                print self.resultspaireddriverapp

                # wait 10 sec
                time.sleep(10)

        # all devices are done
        debug_print("DeviceManager : ✅ All devices are done")

        # stop threads if their state is not finalized
        for thread in self.devices.values():
            if not bool(thread.isdone):
                thread.join()

        # Close automator
        debug_print("DeviceManager : Close Session")
        print_and_exit_script()

    # Checks for connected devices with adb and reformat that output
    def adb_devices(self):
        return set([device.split('\t')[0] for device in check_output(['adb', 'devices']).splitlines() if
                    device.endswith('\tdevice')])

    # Checks for connected devices with adb and reformat that output [old]
    def _adb_devices_second(self):
        adb_ouput = str(check_output(["adb", "devices"]))
        print adb_ouput
        list = adb_ouput.split('\n')
        return list

    # Checks if all connected devices are initialized in their state
    def check_if_all_devices_are_initialized(self):
        if len(self.model.countercars) == 0 or self.alldevicesinitiliazed:
            return True
        counter = 0
        for i in range(int(self.model.countercars)):
            if self.devices.get(i).initialized:
                counter += 1
        if int(self.model.countercars) == counter:
            self.alldevicesinitiliazed = True
            return True
        else:
            return False

    # Checks if all connected devices are done in their state
    def check_if_all_devices_are_done(self):
        if len(self.model.countercars) == 0 or self.alldevicesdone:
            return True
        counter = 0
        for i in range(int(self.model.countercars)):
            if self.devices.get(i).isdone:
                counter += 1
        if self.model.countercars == counter:
            self.alldevicesdone = True
            return True
        else:
            return False

    # check if adb_devices or adb_devices_second should be the correct method to take
    # probably it's the first one
    def check_phones_connected(self):
        list = self.adb_devices()
        if int(len(list)) == int(self.model.countercars):
            return True
        else:
            return False

    # enables wifi on all devices with given credentiels from models
    def enable_wifi_mode(self):
        Device.lock.acquire()
        Device.wifissid = self.model.wifissid
        Device.wifipw = self.model.wifipw
        Device.lock.release()

    def install_apps_from_playstore(self):
        Device.lock.acquire()
        Device.installappsappstore = str(self.model.installappsps).split(',')
        Device.lock.release()

    # creates google accounts on all devices
    def enable_google_account(self):
        Device.lock.acquire()
        Device.creategoogleaccount = bool(self.model.creategoogleaccount)
        Device.phonenumbersgiven = bool(self.model.phonenumbersgiven)
        for i in range(int(self.model.countercars)):
            self.devices.get(i).googlefname = str(self.model.customerfirstname)
            self.devices.get(i).googlelname = str(self.model.customerlastname)
            self.devices.get(i).googlebirthday = int(self.model.birthday)
            self.devices.get(i).googlebirthmonth = int(self.model.birthmonth)
            self.devices.get(i).googlebirthyear = int(self.model.birthyear)
        Device.lock.release()


class Controller(object):

    def __init__(self):
        self.model = Model()
        debug_print("init Controller")
        self.dm = DevicePoolManager(self.model)


controller = Controller()
